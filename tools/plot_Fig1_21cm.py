#!/usr/bin/env python

#Error bars mainly got from  table 3,
#http://arxiv.org/pdf/1108.2635v1.pdf
#and MGS paper

from RunBase import *
import matplotlib.pyplot as plt
import matplotlib.ticker
import pylab 
import math as N



do21cm=True
plaw=0.25
#for division by log(1+z) use this
#plaw=-1


params1 = {'backend': 'pdf',
               'axes.labelsize': 20,
#               'text.fontsize': 18,
               'xtick.labelsize': 20,
               'ytick.labelsize': 20,
#               'legend.draw_frame': False,
               'legend.fontsize': 16,
               'lines.markersize': 6,
               'font.size': 20,
               'text.usetex': True}#
pylab.rcParams.update(params1)


#Planck best fit cosmology
T=LCDMCosmology(Obh2=0.022,Om=0.31,h=0.676)
#PLK-15
#T=LCDMCosmology(Obh2=0.02225,Om=0.3156,h=0.6727)

zLOWZ  = 0.32 
zCMASS = 0.57
zLyaA  = 2.33
zLyaC  = 2.40

z6dFGS   = 0.106
zMGS     = 0.15
zSDSS1   = 0.2
zSDSS2   = 0.35
zWiggleZ1=0.44
zWiggleZ2= 0.6
zWiggleZ3= 0.73

z_CMB = 1090.43

zCombBAO1 = 0.38
zCombBAO2 = 0.51
zCombBAO3 = 0.61

zEBQSO=1.52


rd_EHtoCAMB =153.19/149.28
rd_fid_DR12 = 147.78
rd_fid_DR7  = 151.84  

zl=arange(0,8,0.01)

def fixer(z):
    if plaw>0:
        return z**plaw
    else:
        return log(1.+z)


y1=[T.DaOverrd(z)/fixer(z)   for z in zl]
y2=[T.HIOverrd(z)*z/fixer(z) for z in zl]
y3=[T.DVOverrd(z)/fixer(z)   for z in zl]

fig = plt.figure(1,figsize=(9,6))
sfig= plt.figure(2,figsize=(9,6))
ax = fig.add_subplot(1,1,1)
sax= sfig.add_subplot(1,1,1)
plt.figure(1)

l1,=plt.plot(zl,y1,'r-',lw=2)
#l2,=plt.plot(zl,y3,'b-',lw=2)
l3,=plt.plot(zl,y2,'g-',lw=2)

if plaw>0:
    legend1=pylab.legend([l1,l3],["$%sD_%s(z)/r_d\\sqrt{z}$"%st for st in [('','M'),('z','H')]],loc="lower center")
else:
    legend1=pylab.legend([l1,l3],["$D_%s(z)/r_d\log(1+z)$"%st for st in ['A','H']],loc="lower center")


pylab.gca().add_artist(legend1)
def color_legend(leg):
        # """Color legend texts based on color of corresponding lines"""
        for line, txt in zip(leg.get_lines(), leg.get_texts()):
                txt.set_color(line.get_color())

legend1.draw_frame(False)
color_legend(legend1)

def ersys(x, y):
 	return sqrt(x**2 + y**2)


### Plotting -  Error bars 
def plot_errorbar(z,val, yerr=0, color='blue', fmt='x', markersize=0,label=None, empty=True, alpha=1):
    if empty:
        mfc='white'
        lw=1
    else:
        mfc=color
        lw=2
    pylab.errorbar(z,val/fixer(z), yerr=yerr/fixer(z), color=color, fmt=fmt, markersize=markersize, lw=lw, capthick=lw,capsize=2+2*lw,markerfacecolor=mfc, alpha=alpha)
    if label>0:
        if (mfc=='white'):
            pylab.plot ([],[],fmt,color=color,label=label,markersize=markersize,markerfacecolor=mfc)
        else:
            pylab.plot ([],[],fmt,color=color,label=label,markersize=markersize)

pylab.legend(loc="lower right")

fmt1 = '^'
fmt2 = 's'
empty1= True
empty2= False
alpha= 1.0

######## CURRRENT ERRORS
#Errorbars from DR12 Full-shape
fact = (300000./rd_fid_DR12)

#666/148.651,    yerr=25/148.651
plot_errorbar(z6dFGS,    2.97*rd_EHtoCAMB,   yerr=rd_EHtoCAMB*0.015/0.336**2,  color ='blue', fmt='o', markersize=6, label="current\ generation", empty=True,alpha=alpha)
plot_errorbar(zMGS,      4.464,    yerr=0.168,               color ='blue', fmt='o', markersize=6, alpha=alpha)
plot_errorbar(zSDSS1,    5.2493*rd_EHtoCAMB, yerr=rd_EHtoCAMB*0.0061/0.1905**2,color ='blue', fmt='o', markersize=6, alpha=alpha)
plot_errorbar(zSDSS2,    1348./rd_fid_DR12, yerr=26./rd_fid_DR12 ,color ='blue', fmt='o', markersize=6, alpha=alpha)
plot_errorbar(zWiggleZ1, 1695./rd_fid_DR12 ,yerr=82./rd_fid_DR12 ,color ='blue', fmt='o', markersize=6,  alpha=alpha)
plot_errorbar(zWiggleZ2, 2194./rd_fid_DR12 ,yerr=100./rd_fid_DR12 ,color ='blue', fmt='o', markersize=6,  alpha=alpha)
plot_errorbar(zWiggleZ3, 2486./rd_fid_DR12 ,yerr=85./rd_fid_DR12 ,color ='blue', fmt='o', markersize=6,  alpha=alpha)
plot_errorbar(zCombBAO1,  1512.4/rd_fid_DR12,     yerr=ersys(22.5, 11.0)/rd_fid_DR12,       #
       	color ='blue', fmt='o', markersize=6)
plot_errorbar(zCombBAO2,  1975.2/rd_fid_DR12,     yerr=ersys(26.6, 14.1)/rd_fid_DR12,
		color ='blue', fmt='o', markersize=6)
plot_errorbar(zCombBAO3,  2306.7/rd_fid_DR12,  	 yerr=ersys(33.2, 16.7)/rd_fid_DR12, #
       	color ='blue', fmt='o', markersize=6)
plot_errorbar(zCombBAO1,  fact*zCombBAO1/81.21,       yerr=fact*zCombBAO1*ersys(2.17, 0.97)/(81.21)**2,  #
		color ='blue', fmt='o', markersize=6)
plot_errorbar(zCombBAO2,  fact*zCombBAO2/90.90,       yerr=fact*zCombBAO2*ersys(2.07, 1.08)/(90.90)**2,    
		color ='blue', fmt='o', markersize=6)
plot_errorbar(zCombBAO3,  fact*zCombBAO3/98.96,       yerr=fact*zCombBAO3*ersys(2.21, 1.18)/(98.96)**2, 
		color ='blue', fmt='o', markersize=6)
#plot_errorbar(zEBQSO,  3855/rd_fid_DR12, yerr=170/rd_fid_DR12,  color ='blue', fmt='o', markersize=6, alpha=alpha)
plot_errorbar(zLyaA,  37.77,  yerr=2.13,  color ='blue', fmt='o', markersize=6)
plot_errorbar(zLyaA,  9.07*zLyaA,       yerr=0.31*zLyaA,       color ='blue', fmt='o', markersize=6)
plot_errorbar(zLyaC,  35.7,   yerr=1.5,    color ='blue', fmt='o', markersize=6)
plot_errorbar(zLyaC,  9.01*zLyaC,        yerr=0.32*zLyaC,        color ='blue', fmt='o', markersize=6)



def plotFutureErrorbar (z,dae,he,label,fmt,color,markersize=6):
    da=T.DaOverrd(z)
    hi=T.HIOverrd(z)*z
    plot_errorbar(z,  da,   yerr=da*dae,   color=color, fmt=fmt, markersize=markersize,label=label, empty=False)
    plot_errorbar(z,  hi,        yerr=hi*he, color=color, fmt=fmt, markersize=markersize, empty=False)


desi="""0.15 & 2.78 & 5.34 & 1.95 & 5.24 & 13.79 & 0.23 & 376 &  50 &   8 & 7.51 & 3.60 \\ 
0.25 & 1.87 & 3.51 & 1.30 & 3.24 & 8.19 & 0.56 & 347 & 125 &  23 & 5.24 & 2.55 \\ 
0.35 & 1.45 & 2.69 & 1.00 & 2.58 & 6.35 & 0.99 & 291 & 222 &  31 & 4.44 & 2.17 \\ 
0.45 & 1.19 & 2.20 & 0.82 & 2.36 & 5.74 & 1.46 & 285 & 332 &  31 & 3.92 & 1.91 \\ 
0.55 & 1.01 & 1.85 & 0.70 & 2.42 & 5.90 & 1.94 & 431 & 448 &  32 & 3.31 & 1.60 \\ 
0.65 & 0.87 & 1.60 & 0.60 & 2.58 & 6.34 & 2.42 & 722 & 563 &  34 & 2.80 & 1.34 \\ 
0.75 & 0.77 & 1.41 & 0.53 & 2.77 & 6.85 & 2.87 & 1112 & 675 &  37 & 2.47 & 1.18 \\ 
0.85 & 0.76 & 1.35 & 0.52 & 2.05 & 5.17 & 3.29 & 1333 & 471 &  44 & 2.34 & 1.11 \\ 
0.95 & 0.88 & 1.42 & 0.58 & 1.03 & 2.76 & 3.67 & 1401 &  91 &  50 & 2.34 & 1.13 \\ 
1.05 & 0.91 & 1.41 & 0.59 & 0.82 & 2.24 & 4.01 & 1469 &  11 &  56 & 2.32 & 1.12 \\ 
1.15 & 0.91 & 1.38 & 0.58 & 0.75 & 2.05 & 4.31 & 1483 &   0 &  62 & 2.30 & 1.12 \\ 
1.25 & 0.91 & 1.36 & 0.58 & 0.69 & 1.86 & 4.57 & 1421 &   0 &  69 & 2.32 & 1.14 \\ 
1.35 & 1.00 & 1.46 & 0.64 & 0.53 & 1.42 & 4.80 & 1120 &   0 &  75 & 2.45 & 1.26 \\ 
1.45 & 1.17 & 1.66 & 0.74 & 0.38 & 1.00 & 4.99 & 775 &   0 &  81 & 2.71 & 1.47 \\ 
1.55 & 1.50 & 2.04 & 0.93 & 0.25 & 0.63 & 5.15 & 460 &   0 &  83 & 3.22 & 1.89 \\ 
1.65 & 2.36 & 3.15 & 1.45 & 0.13 & 0.33 & 5.29 & 179 &   0 &  80 & 4.63 & 3.06 \\ 
1.75 & 3.62 & 4.87 & 2.23 & 0.08 & 0.19 & 5.40 &  49 &   0 &  77 & 7.17 & 5.14 \\ 
1.85 & 4.79 & 6.55 & 2.98 & 0.06 & 0.13 & 5.49 &   0 &   0 &  74 & 10.26 & 7.66 \\ """
desi=np.array(([[float(x) for x in s.split('&')[:3]] for s in desi.replace('\\','').split('\n')]))
lab='DESI'
for z,dae,he in desi:
    plotFutureErrorbar(z,dae/100,he/100,lab,'o','green')
    lab=None
plt.figure(2)
plt.plot(desi[:,0],desi[:,1],'g-', lw=2,label='DESI')
plt.plot(desi[:,0],desi[:,2],'g--',lw=2)
plt.figure(1)

euclid="""0.65 & 1.23 & 1.89 & 0.79 & 0.75 & 2.24 & 2.59 & 1100 \\ 
0.75 & 0.83 & 1.42 & 0.56 & 1.69 & 5.03 & 3.07 & 2950 \\ 
0.85 & 0.74 & 1.27 & 0.50 & 1.90 & 5.60 & 3.52 & 3800 \\ 
0.95 & 0.71 & 1.19 & 0.48 & 1.75 & 5.11 & 3.93 & 3900 \\ 
1.05 & 0.70 & 1.14 & 0.46 & 1.55 & 4.48 & 4.29 & 3775 \\ 
1.15 & 0.70 & 1.12 & 0.46 & 1.35 & 3.85 & 4.62 & 3525 \\ 
1.25 & 0.70 & 1.10 & 0.46 & 1.17 & 3.31 & 4.90 & 3250 \\ 
1.35 & 0.73 & 1.11 & 0.47 & 0.98 & 2.74 & 5.14 & 2850 \\ 
1.45 & 0.78 & 1.16 & 0.50 & 0.78 & 2.15 & 5.35 & 2350 \\ 
1.55 & 0.87 & 1.24 & 0.55 & 0.59 & 1.62 & 5.52 & 1850 \\ 
1.65 & 1.01 & 1.40 & 0.63 & 0.43 & 1.16 & 5.66 & 1375 \\ 
1.75 & 1.23 & 1.64 & 0.75 & 0.30 & 0.80 & 5.78 & 975 \\ 
1.85 & 1.61 & 2.07 & 0.97 & 0.20 & 0.52 & 5.88 & 650 \\ 
1.95 & 2.32 & 2.90 & 1.38 & 0.12 & 0.31 & 5.95 & 400 \\ 
2.05 & 5.32 & 6.39 & 3.11 & 0.04 & 0.12 & 6.01 & 150 \\ """
euclid=np.array(([[float(x) for x in s.split('&')[:3]] for s in euclid.replace('\\','').split('\n')]))
lab='EUCLID'
for z,dae,he in euclid:
    plotFutureErrorbar(z,dae/100,he/100,lab,'^','cyan')
    lab=None
plt.figure(2)
plt.plot(euclid[:,0],euclid[:,1],'-',lw=2,color='cyan', label='EUCLID')
plt.plot(euclid[:,0],euclid[:,2],'--',lw=2,color='cyan')
plt.figure(1)


wfirst="""1.05 & 1.51 & 2.72 & 1.03 & 4.37 & 12.60 & 0.57 & 10623 \\ 
1.15 & 1.43 & 2.56 & 0.98 & 4.50 & 12.85 & 0.62 & 11776 \\ 
1.25 & 1.35 & 2.42 & 0.92 & 5.00 & 14.13 & 0.65 & 13877 \\ 
1.35 & 1.29 & 2.30 & 0.88 & 5.33 & 14.90 & 0.69 & 15527 \\ 
1.45 & 1.24 & 2.21 & 0.85 & 5.58 & 15.42 & 0.71 & 16890 \\ 
1.55 & 1.23 & 2.16 & 0.84 & 5.04 & 13.79 & 0.74 & 15759 \\ 
1.65 & 1.25 & 2.15 & 0.84 & 4.15 & 11.23 & 0.76 & 13305 \\ 
1.75 & 1.28 & 2.16 & 0.86 & 3.33 & 8.94 & 0.77 & 10918 \\ 
1.85 & 1.33 & 2.19 & 0.88 & 2.61 & 6.94 & 0.78 & 8697 \\ 
1.95 & 1.41 & 2.27 & 0.93 & 1.99 & 5.25 & 0.79 & 6718 \\ 
2.05 & 2.51 & 3.52 & 1.57 & 0.47 & 1.23 & 0.80 & 1610 \\ 
2.15 & 2.60 & 3.62 & 1.62 & 0.44 & 1.14 & 0.81 & 1509 \\ 
2.25 & 2.74 & 3.78 & 1.70 & 0.40 & 1.02 & 0.81 & 1368 \\ 
2.35 & 3.02 & 4.09 & 1.86 & 0.33 & 0.85 & 0.81 & 1156 \\ 
2.45 & 3.38 & 4.52 & 2.08 & 0.28 & 0.70 & 0.81 & 960 \\ 
2.55 & 3.87 & 5.11 & 2.36 & 0.23 & 0.57 & 0.81 & 781 \\ 
2.65 & 4.52 & 5.90 & 2.75 & 0.18 & 0.45 & 0.81 & 626 \\ 
2.75 & 5.41 & 6.99 & 3.27 & 0.14 & 0.35 & 0.81 & 490 \\ """
wfirst=np.array(([[float(x) for x in s.split('&')[:3]] for s in wfirst.replace('\\','').split('\n')]))
lab='WFIRST'
for z,dae,he in wfirst:
    plotFutureErrorbar(z,dae/100,he/100,lab,'>','orange')
    lab=None

plt.figure(2)
plt.plot(wfirst[:,0],wfirst[:,1],'-',lw=2,color='orange', label='WFIRST')
plt.plot(wfirst[:,0],wfirst[:,2],'--',lw=2,color='orange')
plt.figure(1)




if do21cm:
## run printbaoerrors.py in RSDCalib
    obuljen="""0.35 1.7696078666859592 4.485272904635403 0.6365320618748577 1.040503064889359
0.44999999999999996 1.3755049933869665 3.501504453595297 0.5236214200068199 0.8559348632473734
0.5499999999999999 1.1289271818274567 2.87377354916168 0.4533450797747129 0.7410581780572909
0.6499999999999999 0.9617124416327593 2.4393984824104673 0.406044429779565 0.6637383779853019
0.7499999999999999 0.8419064765315235 2.121904732171116 0.37249771083858285 0.608901255259291
0.8499999999999999 0.7525612436135195 1.8805446667424184 0.3478113248146307 0.56854756031178
0.9499999999999998 0.6838626178620527 1.6915677101028488 0.3291504057158485 0.5380433184325534
1.0499999999999998 0.629740806807017 1.540162775366186 0.3147612758517763 0.5145219038100247
1.15 0.586244196422078 1.416594741592359 0.3035023169584366 0.4961171854996011
1.2499999999999998 0.5506920330967133 1.3141906267730235 0.29459941364840303 0.481563766795749
1.3499999999999996 0.5212030523855917 1.2282175222641725 0.2875098369271384 0.469974484430468
1.4499999999999997 0.49641907980975253 1.1552224730788612 0.2818423461197209 0.4607098043103424
1.5499999999999998 0.47533572921364653 1.0926260924469056 0.2773081783032288 0.4532977070223807
1.65 0.4571948380450588 1.0384626233102803 0.2736898488941664 0.447382688099604
1.7499999999999996 0.4414140407513904 0.9912082223661798 0.27082065209079176 0.4426922486126255
1.8499999999999996 0.42754323711141184 0.9496687031213195 0.2685708188015551 0.43901426810616867
1.9499999999999997 0.41527310893469754 0.9129456869760465 0.2668379468005821 0.4361813591150722
2.05 0.40439905116596686 0.880363776508415 0.2655402396649427 0.4340598160564116
2.1499999999999995 0.3947780589419452 0.851398105053104 0.2646116412892398 0.4325416633330267
2.2499999999999996 0.38631659166583765 0.8256435031932741 0.2639982779112664 0.4315388392247327
2.3499999999999996 0.37893620886662516 0.8027619348924258 0.26365581713192326 0.4309788778911408
2.4499999999999997 0.3724877871554525 0.7823728525372785 0.2635474824814749 0.43080166132658165
2.5499999999999994 0.36683888841382856 0.7641477229347541 0.2636425339285859 0.4309569387890847
2.6499999999999995 0.3618951258933928 0.747828974411003 0.26391509894558945 0.4314024167922645
2.7499999999999996 0.3575710825524896 0.7331912787340826 0.2643432640432528 0.4321022733376571
2.8499999999999996 0.3537934269575878 0.7200413992144542 0.26490835973836935 0.43302598920190355
2.9499999999999997 0.3505007451540532 0.7082149765023485 0.26559439355466047 0.4341474211351793
3.0499999999999994 0.347639929304557 0.6975698653746115 0.2663875967080332 0.4354440608618724
3.1499999999999995 0.3451649898521279 0.6879827541721953 0.26727605892673284 0.43689643812647166
3.2499999999999996 0.3430361295712794 0.6793464565230605 0.26824943214885466 0.43848763633816007
3.349999999999999 0.3412187521168826 0.6715674132704711 0.2692986885233135 0.4402028969774135
3.4499999999999993 0.339682548468551 0.6645635170959886 0.2704159214702625 0.44202929442980443
3.5499999999999994 0.33840092170049063 0.658262519041286 0.2715941812486894 0.44395546720493934
3.6499999999999995 0.3373505216354507 0.6526007138176874 0.27282733831985734 0.44597139456230844
3.7499999999999996 0.33651067543385565 0.647521624718897 0.27410996914321545 0.4480682098395656
3.849999999999999 0.3358630864485019 0.642975108250691 0.27543726028350835 0.4502380437144331
3.9499999999999993 0.33539153475700706 0.6389165421801655 0.2768049275445736 0.4524738920139003
4.049999999999999 0.33508156090845836 0.6353060602194502 0.2782091474633915 0.4547695037255265
4.149999999999999 0.33492025514085666 0.6321079705880657 0.2796464990161325 0.4571192857114054
4.249999999999999 0.3348960922927868 0.6292902781401101 0.2811139138085338 0.45951822130294795
4.349999999999999 0.33499873470739155 0.6268242037632855 0.28260863342251297 0.4619618005588948
4.449999999999998 0.3352188969517639 0.6246838142113273 0.28412817267271123 0.4644459602153298
4.549999999999999 0.3355482436260405 0.622845720367966 0.28567028788298765 0.46696703183952093
4.649999999999999 0.3359792661339042 0.6212887705859883 0.28723294945756944 0.46952169697226215
4.749999999999998 0.336505193575955 0.6199938073400537 0.2888143180225561 0.47210694812633713
4.849999999999999 0.3371199181712719 0.6189434607698093 0.290412723591922 0.4747200547541347
4.949999999999998 0.33781790783695853 0.6181219378217574 0.29202664741158646 0.4773585335580386
5.049999999999999 0.33859414847624175 0.6175148607978103 0.293654706049768 0.48002012247402
5.149999999999999 0.33944417630569246 0.6171092313751116 0.29529563741118625 0.48270275780579475
5.249999999999998 0.3403639237873905 0.616893170260567 0.29694828837136783 0.48540455403384486
5.349999999999999 0.3413496567924013 0.6168557759785831 0.29861160390924024 0.48812378604100504
5.449999999999998 0.34239802106553957 0.616987129849545 0.3002846175028085 0.4908588733969832
5.549999999999999 0.34350610861744507 0.6172783367510036 0.3019664425713331 0.49360836637716704
5.649999999999999 0.34467112717010523 0.6177210598644856 0.30365626485987873 0.49637093352471634
5.749999999999998 0.34589060707309904 0.6183077484523873 0.30535333569097933 0.49914535060967496
5.849999999999999 0.3471624900872024 0.6190317215990049 0.30705696595043847 0.5019304907850831
5.949999999999998 0.3484846499790313 0.6198865160334972 0.3087665206767714 0.5047253157485171"""
        ## for kmax=0.3
#     obuljen="""2.0 0.41076814910800985 0.8974515972471415 0.26613913457968674 0.4350389305390781
# 2.1 0.40050614377753757 0.866698477912462 0.2650334198300746 0.433231229791616
# 2.2 0.3917485734184493 0.8397030045422171 0.2642685172900726 0.43198068207337736
# 2.3000000000000003 0.38411144668642494 0.8157440635437527 0.2637956335308546 0.43120750931339724
# 2.4000000000000004 0.37747533591225463 0.7944571939872375 0.2635744315920438 0.4308457736704793
# 2.5000000000000004 0.37183407295650767 0.7756489455061119 0.26357129753521613 0.43084054314448317
# 2.6000000000000005 0.36696059271710596 0.758892356981976 0.26375807359231107 0.43114577233155676
# 2.7000000000000006 0.3627918716048722 0.7439786572609498 0.26411096708418424 0.43172256759363425
# 2.8000000000000007 0.3593369750796001 0.730806021038122 0.2646097452686241 0.43253786993186527
# 2.900000000000001 0.3564610518715101 0.7191157842635231 0.2652371606479625 0.43356346901803994
# 3.000000000000001 0.3541346203735787 0.7087890203141892 0.26597838314706607 0.43477512195886625
# 3.100000000000001 0.352375376107327 0.699776745628197 0.26682059406248865 0.43615188838595337
# 3.200000000000001 0.35110861850546554 0.691926370385326 0.2677527177007125 0.4376756474339833
# 3.300000000000001 0.35032947442201523 0.6851786188048464 0.26876509330675064 0.4393306062694301
# 3.4000000000000012 0.35006424387948304 0.679521469059014 0.26984925646882113 0.4411029414778415
# 3.5000000000000013 0.3502834377413495 0.6748784150384392 0.270997817424605 0.4429805582104615
# 3.6000000000000014 0.3510048399491126 0.6712375642054818 0.2722042519364902 0.4449527908075006
# 3.7000000000000015 0.35226703718187635 0.6686203308644513 0.2734627773036725 0.4470101987152744
# 3.8000000000000016 0.35408054812654555 0.6670143208835718 0.2747683052139424 0.44914445005294357
# 3.9000000000000017 0.35648905801655223 0.6664544519533377 0.27611629593887754 0.4513481232142515
# 4.000000000000002 0.35954930883914327 0.6669993963464524 0.27750268492733465 0.45361458542586985
# 4.100000000000001 0.36331389924725566 0.6687015687972384 0.27892387524821544 0.4559379436495062
# 4.200000000000002 0.3678595606182716 0.6716503494292513 0.28037662771789756 0.45831290230853444
# 4.3000000000000025 0.37327013407947696 0.675952280357307 0.2818580159638343 0.46073468834876846
# 4.400000000000002 0.3796486807307637 0.6817355215739931 0.28336544033861155 0.4631990399409502
# 4.500000000000002 0.3871167090157047 0.6891594049479147 0.2848965398570138 0.46570209715691574
# 4.600000000000002 0.3957979257372625 0.6983954791178166 0.28644916390193076 0.4682403542653099
# 4.700000000000003 0.4058617723862021 0.7096692674969753 0.2880213979380136 0.470810670337785
# 4.8000000000000025 0.41749331232241543 0.7232353317121248 0.2896114894518385 0.4734101801856845
# 4.900000000000002 0.43087652743852606 0.7393576137938551 0.29121782980399535 0.4760362632655346
# 5.000000000000003 0.446275158459599 0.7583961723319835 0.2928389861614256 0.47868656703810164
# 5.100000000000003 0.46396953196776414 0.7807427797632511 0.29447363713168107 0.48135893114122835
# 5.200000000000003 0.48423668001028797 0.8067972502774461 0.2961205609480094 0.48405136670828636
# 5.3000000000000025 0.5074812186303752 0.8371157046397811 0.2977786704150372 0.48676208712868135
# 5.400000000000003 0.534133837698053 0.8723002767952498 0.29944695564102547 0.4894894413194397
# 5.5000000000000036 0.5646227190670047 0.912964690275267 0.30112447625659294 0.49223189972887343
# 5.600000000000003 0.599572949539017 0.9599678466907056 0.3028103975489806 0.4949880893325971
# 5.700000000000003 0.639656826457442 1.014245962273911 0.30450393860902164 0.49775673342933363
# 5.800000000000003 0.6855503770346182 1.0767598819711253 0.3062043671919532 0.5005366420574043
# 5.900000000000004 0.7382385281696893 1.1488620633701667 0.3079110359550321 0.503326749268517
# 6.0000000000000036 0.7987832577404351 1.2320279867578678 0.3096233348996294 0.5061260578086095"""


    print(obuljen.replace('\\','').split('\n'))
    obuljen=np.array(([[float(x) for x in s.split(' ')] for s in obuljen.replace('\\','').split('\n')]))
    lab='21 cm Stage II'
    for z,dae1,he1,dae2,he2 in obuljen:
        plotFutureErrorbar(z,dae1*0.01,he1*0.01,lab,'*','red',markersize=8)
        lab=None
    
plt.figure(2)
plt.plot(obuljen[:,0],obuljen[:,1],'-',lw=2,color='red', label='21cm Stage II')
plt.plot(obuljen[:,0],obuljen[:,2],'--',lw=2,color='red')
plt.figure(1)


ax.xaxis.set_major_formatter(matplotlib.ticker.ScalarFormatter())
ax.yaxis.set_major_formatter(matplotlib.ticker.ScalarFormatter())


plt.yticks(list(range(0, 50, 10)))



if plaw>0:
    pylab.ylabel("${\\rm distance}/r_d\\sqrt{z}$")
    pylab.xlabel("$z$")
    pylab.legend(loc='upper left', numpoints=1, frameon=False)
    pylab.ylim(0,45)
    pylab.xlim(0.00,7.0)
    pylab.tight_layout()

    if do21cm:
        pylab.savefig("Fig1_21cm.pdf")
    else:
        pylab.savefig("Fig1_21cmSans.pdf")
else:
    pylab.legend(loc='lower left', numpoints=1)
    pylab.ylabel("$D(z)/r_d \log(1+z)$")
    pylab.ylim(15,35)
    pylab.xlim(0.08,8.0)
    pylab.xlabel("$z$")
    plt.semilogx()
    pylab.tight_layout()
    pylab.savefig("Fig1_21cm_v2.pdf")


plt.figure(2)
plt.xlim(0,6.5)
plt.plot([],[],'k-',label='$D_A$')
plt.plot([],[],'k--',label='$D_H$')
plt.legend(frameon=False)



plt.xlabel("$z$")
plt.ylabel("${\\rm precision}\ [\%]$")
plt.tight_layout()
plt.savefig("baoprecision.pdf")
    
#pylab.show()

